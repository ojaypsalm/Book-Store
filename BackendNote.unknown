INTRODUCTION TO NODE.JS
-Created in 2009 by Ryan Dahl
-created to fix limitations to traditonal web servers
- Problems such as memory issues, time it takes to fetch data i.e
(read and write operations) e.t.c
- Reason why Asynchronous operation was developed

wIW5yFamLdpvwAuG
mongodb+srv://adekanmisamuel4:wIW5yFamLdpvwAuG@cluster0.pyry4wp.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0

KEY REASONS TO USE NODE.JS
- JavaScript Everywhere: You don't have to change to new language
- Asynchronous Operations: Helps you to handle multiple tasks simultaneously 
- Rich Ecosystem: You can get enough help online
- Scalable
-

ASYNCHRONOUS NATURE OF NODEJS
-This simply means ability to perform multiple tasks simultenously 

BASIC NODE.JS CONCEPTS
- Modules: Resuseable pieces of codes
- Event-driven architecture: Allows you to perform multiple tasks
- npm(Node package Manager): install libaries, saves time and effort.

SETTING NODE.JS ENVIRONMENT
- Download Node
- install Node
- Verify installation (node --version)


installation:
npm init -y
npm install express
npm install nodemon
npm install mongodb
npm install mongoose




UcKTfDHGyQOqQk41
105.113.82.63

mongodb+srv://adekanmisamuel4:UcKTfDHGyQOqQk41@cluster0.7nfzsln.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0





//Get product from database
// app.get('/api/products', async (req, res)=>{
//     try {
//            const product = await Product.find({})
//            res.status(200).json(product)

//     } catch (error) {
//        res.status(500).json({message: error.message})
//     }
// })





//Add product to database

// app.post('/api/products', async (req, res)=>{
//     try {
//            const product = await Product.create(req.body)
//            res.status(200).json(product)

//     } catch (error) {
//        res.status(500).json({message: error.message})
//     }
// })

//Get product by ID
// app.get('/api/product/:id', async(req, res)=>{
//     try {
//         const {id} = req.params;
//         const product = await Product.findById(id) 
//         res.status(200).json(product)
//   } catch (error) {
//       res.status(500).json ({message: error.message})
//   }
// })


//update data on the database

// app.put('/api/product/:id', async(req, res)=>{
//     try {
//         const {id} = req.params;
//         const product = await Product.findByIdAndUpdate(id, req.body)
//         if(!product){
//             return res.status(404).json({message:"Product not found!, did you forget your glasses today?"})

//         }
//         const updatedProduct = await Product.findById(id)
//         res.status(200).json(updatedProduct)
//     } catch (error) {
//         res.status(500).json({message: error.message})
//     }
// })

//Delete Data from Database
// app.delete('/api/products/:id', async(req, res)=>{
//     try {

//         const {id} = req.params;
//         const product = await Product.findByIdAndDelete(id)
//         if(!product){
//            return res.status(404).json({message:"Product not found!"})
//         }   

//         res.status(200).json({message: 'product deleted successfully!!!'})    

//     } catch (error) {
//         res.status(500).json({message: error.message})
//     }
// })






// //Helps to pass json Request
// app.use(express.json)

// //custom middleware
// app.use((req, res, next)=>{
//     console.log(`[${new Date().toLocaleString()}] ${req.method} ${res.url} `)
//     next()
// })

// //Route to handle GET request to the homepage


// app.get('/about', (req, res)=>{
//     req.send("This is the about Page")
// })

// app.get('/data', (req, res)=>{
//     const message =req.body;
//     res.send(`received Message: ${message}` )
// })

// const PORT = 3000

// app.listen(PORT, ()=>{
//     console.log(`Server is running on ${PORT}`)
// })
// app.listen(3000, () => {
//     console.log("server is running at port 3000")
// })

// app.get('/', function (req, res) {
//     res.send('Hello from my Backend!')
//   })
  

